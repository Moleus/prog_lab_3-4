@startuml
'horizontally
skinparam nodesep 25
'vertically
skinparam ranksep 25
skinparam linetype ortho


abstract class Character {
	# place : Place
	- name : String
	+ getName() 

	+ doSomething(String sm) 
	+ obtain(Thing) 
	+ pullOut(Thing ..., Place) 
	+ say(String, Character)

	+ equals(Object) : boolean
	+ hashCode() : int
	+ toString() : String
}

together {
abstract class Animal { }

class Human {
	+ Human(String)
}
}

abstract class Tool {
	# appointment : String
}

class Rope {}

enum Thing {
	Chair
	Painting
	Sponge
	Fungus
	AbstractThing
	- name : String

	Thing(String) 
	+ getName() 
	+ liftedWithRope() 
	+ readyForAction(String)
}
  
together {
class House {
	- houseStands : boolean 
	- houseCleanliness : HouseCleanliness
	- HouseTypes : HouseTypes
	
	- corners : ArrayList<CornerInHouse>
	- things : ArrayList<Thing>
	
	+ House(HouseTypes, houseCleanliness)

	+ getType()
	+ getCleanness()
	+ setOwner(Character)
	+ getOwner() : Character 
	+ settleIn(Character) : void
	+ settleOut(Character) : void
												
	+ fellDown() 
	+ isHouseStands() 
}

class NearHouse {
	NearHouse(String)
}

class CornerInHouse {
	# state : CornerState
	- things : ArrayList<Thing>

	+ getCornerState() : CornerState
	+ setCornerState(CornerState)
}
}

class Kenga {
	+ Kenga(String)	
	+ tieKnots() 
	+ getNervous(String) 
	+ distinguish(Thing, Thing) 
}

class Owl {
	+ Owl(Stirng)
	+ responseWithIndignation(String) 
	+ beSurprised() 
	+ look() 
	+ laughWithSarcasm() 
}


class Rabbit { 
	+ Rabbit(String)
}

class IaIa { 
	+ IaIa(String)
}

class TinyRu  {
	+ TinyRu(String)
	+ hideInHouse(House) 
	+ appear(String) 
}

class Bear  { 
	+ Bear(String)
	+ moveToPlace(Place)
}

class Piglet  { 
	+ Piglet(String)
  + moveToPlace(Place)
}

abstract class AbstractPlace {
	# name : String

	+ Place(String)
	+ getName()

	+ equals(Object) : boolean
	+ hashCode() : int
	+ toString() : String
}

interface AbleToHear { 
	+ hasHeard(String) : void
}

interface AbleToInteractWithThings {
	moveThingToPlace(Thing thing, Place place)
	removeThingFromPlace(Thing thing)	
	pickUpThing(Thing thing)
}

interface Moveable { 
	+ moveToPlace(Place)
	+ leavePlace(Place)
}

interface Feeling { 
	+ isAngry : boolean
	+ becameAngry(Character) : void
}

interface AbleToContainThings { 
	- things : ArrayList<Thing>

	+ default containsThing(Thing) : boolean
	+ default addThing(Thing) : void
	+ default getThings() : ArrayList<Thing>
	+ default removeThing(Thing) : void
}

interface AbleToContainCharacters { 
	- characters : ArrayList<Character>

	+ default containsCharacter(Character) : boolean
	+ default addCharacters(Character ...) : void
	+ default getCharacters() : ArrayList<Character>
	+ default removeCharacter(Character) : void
}

interface AbleToAge {
	- ageType : AgeTypes
	+ getAgeType() : AgeTypes	
	+ setAgeType(AgeTypes) : void
}

enum AgeTypes {
	ANCIENT("старинный")
	AGED("поношенный временем")
	OLD("старый")
	NEW("новый")
}

enum HouseCleanliness {
	SPOTLESS("без единой пылинки")
	CLEAN("чистый")
	DIRTY("грязный")
	DUSTY("пыльный")
	OVERGROWN("заросший")
	FILTHY("утонувший в грязи")
}

Character <-- Human
Character <-- Animal

Animal <--- Piglet
Animal <--- TinyRu
Animal <--- Kenga
Animal <--- Owl
Animal <---- Bear
Animal <--- IaIa
Animal <--- Rabbit

Thing <... Kenga
Thing <... CornerInHouse
House <... Kenga
House <... TinyRu
House <... Owl

' Interfaces
AbleToHear <|-- Character
Moveable <|--- Character
AbleToInteractWithThings <|--- Character

Feeling <|--- Kenga

Place <.. Character

Place <---- House
Place <--- NearHouse

AbleToContainCharacters <|-left- Place
AbleToContainThings <|-left- Place

AbleToContainThings <|-- CornerInHouse

AbleToContainCharacters .[hidden]d. AbleToContainThings 

CornerInHouse <.l. House
Thing         <.l.. House

@enduml